/// <reference path="../../../web/js/vendor/ajv/ajv.d.ts" />
/// <reference path="../../../web/js/vendor/json-schema-view-js-master/dist/json-refs.d.ts" />
interface SchemaDef {
    module: string;
    type: string;
    serverUse: string;
    serverProp: string;
}
declare type JsonEditorValidation = (json: unknown) => Promise<string | null>;
/**
 * Globally available JSON Validator. It can validate against schemas stored in web/schemas/*.json
 * The schemas in this directory are generated by the `gulp schema` command and defined in schemagen/schemas.json
 * To add validation for a new type:
 * * Add to schemas.json
 * * Run gulp schema (or gulp build)
 * * Call jsonValidator.validateType( yourObject, "IYourInterface")
 *
 * There are some utility functions that can wrap a type in a validator closure or give you
 * access to the raw object.
 */
declare class JsonValidator {
    private schemas;
    private validators;
    private ajv;
    /**
     * This is a global object, you should not have to create it. See `jsonValidator`
     */
    constructor();
    /**
     * Create a display string from an error list
     * @param errors
     */
    errorString(errors: ajv.ErrorObject[]): string | null;
    /**
     * Create a validation function for the given type that is used in some of the Matrix editors
     * @param type
     */
    validationFunction(type: string): JsonEditorValidation;
    /**
     * Validate the given data against the given schema.
     * @param data
     * @param type
     * @return null if valid, or an array of errors if not
     */
    validateType(data: unknown, type: string): Promise<ajv.ErrorObject[] | null>;
    /**
     * Get the validator function for the given type
     * @param type
     */
    validatorByType(type: string): Promise<ajv.ValidateFunction | null>;
    /**
     * Get the schema object for the given type
     * @param type
     * @throws Exception if the schema is not found
     */
    schemaByType(type: string): Promise<object | null>;
    /**
     * Get the schema UI element. This can be embedded in other DOM elements
     * @param type The name of the type - this should exist in the schemas dir
     * @throws Exception if the schema is not found
     */
    schemaView(type: string): Promise<MatrixSchemaView | null>;
}
interface ISchema extends ISchemaObject {
}
declare type ISchemaPropertyMap = {
    key: String;
    ISchemaProperty: any;
};
interface ISchemaItem {
    description?: string;
    type?: ESchemaType;
    anyOf?: ISchemaItem[];
}
interface ISchemaObject extends ISchemaItem {
    properties?: ISchemaPropertyMap;
    additionalProperties?: ISchemaItem;
    required?: string[];
}
interface ISchemaArray extends ISchemaItem {
    items?: ISchemaItem;
}
declare enum ESchemaType {
    string = "string",
    array = "array",
    object = "object",
    number = "number",
    boolean = "boolean"
}
interface ISchemaPrintTypeInfo {
    help?: string;
    type?: string;
    subItems?: string;
    subItemStart?: string;
    subItemEnd?: string;
}
declare class MatrixSchemaView {
    schema: ISchema;
    constructor(schema: ISchema);
    render(): HTMLDivElement;
    renderObject(object: ISchemaObject): string;
    renderArray(array: ISchemaArray): string;
    renderProperty(prop: ISchemaItem): ISchemaPrintTypeInfo;
}
declare const jsonValidator: JsonValidator;
//# sourceMappingURL=validation.d.ts.map